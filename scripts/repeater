#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.actions import an_action
from photons_app import helpers as hp

from photons_messages import DeviceMessages, LightMessages
from photons_control.script import Pipeline, Repeater

from delfick_project.addons import addon_hook
import logging

log = logging.getLogger("repeater")


@addon_hook(
    extras=[
        ("lifx.photons", "control"),
        ("lifx.photons", "transport"),
        ("lifx.photons", "messages"),
        ("lifx.photons", "device_finder"),
    ]
)
def __lifx__(collector, *args, **kwargs):
    pass


@an_action(needs_target=True, special_reference=True)
async def repeater(collector, target, reference, **kwargs):
    """
    Do a never ending loop getting information from your devices

    ``repeater d073d5000001,d073d5000002``

    or if you want it to find devices each loop,

    ``repeater``

    Will find the product type, current firmware, group, location and label for your devices.
    """

    async def on_done_loop():
        log.info("loop done")

    getter = [
        DeviceMessages.GetVersion(),
        DeviceMessages.GetGroup(),
        DeviceMessages.GetLocation(),
        DeviceMessages.GetHostFirmware(),
        LightMessages.GetColor(),
    ]
    pipeline = Pipeline(*getter, spread=1)
    repeater = Repeater(pipeline, min_loop_time=10, on_done_loop=on_done_loop)

    def error_catcher(e):
        log.error(e)

    async with target.session() as afr:
        async for pkt in target.script(repeater).run_with(
            reference, afr, error_catcher=error_catcher, message_timeout=5
        ):
            print(pkt.serial, repr(pkt.payload))


if __name__ == "__main__":
    from photons_app.executor import main
    import sys

    main(["lan:repeater"] + sys.argv[1:])
