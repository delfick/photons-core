#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.errors import PhotonsAppError
from photons_app.actions import an_action

from photons_tile_paint.animation import (
    coords_for_horizontal_line,
    tile_serials_from_reference,
    put_characters_on_canvas,
    canvas_to_msgs,
)
from photons_control.planner import Gatherer, make_plans
from photons_themes.theme import ThemeColor as Color
from photons_control.script import FromGenerator
from photons_tile_paint.font.dice import dice
from photons_messages import DeviceMessages
from photons_themes.canvas import Canvas

from delfick_project.addons import addon_hook


@addon_hook(
    extras=[
        ("lifx.photons", "transport"),
        ("lifx.photons", "themes"),
        ("lifx.photons", "control"),
        ("lifx.photons", "tile_paint"),
        ("lifx.photons", "device_finder"),
    ]
)
def __lifx__(collector, *args, **kwargs):
    pass


@an_action(needs_target=True, special_reference=True)
async def tile_dice(collector, target, reference, **kwargs):
    """
    Display dice on your tiles

    ``tile_dice d073d5000001,d073d5000002``

    You can make it ignore the orientation of the tile by saying::

    ``tile_dice d073d5000001,d073d5000002 -- '{"ignore_orientation": true}'
    """
    extra = collector.configuration["photons_app"].extra_as_json

    canvas = Canvas()

    def default_color_func(i, j):
        if j == -3:
            return Color(0, 1, 0.4, 3500)
        return Color(0, 0, 0, 3500)

    canvas.set_default_color_func(default_color_func)

    numbers = ["1", "2", "3", "4", "5"]
    characters = [dice[n] for n in numbers]
    color = Color(100, 1, 1, 3500)
    put_characters_on_canvas(canvas, characters, coords_for_horizontal_line, color)

    plans = make_plans("chain", "capability")
    gatherer = Gatherer(target)

    def e(error):
        log.error(error)

    found = []

    async def gen(reference, sender, **kwargs):
        async for serial, _, info in gatherer.gather_per_serial(
            plans, reference, sender, **kwargs
        ):
            if "chain" not in info:
                continue

            if not info["capability"]["cap"].has_matrix:
                continue

            yield DeviceMessages.SetPower(level=65535, res_required=False, target=serial)

            found.append(serial)
            msgs = canvas_to_msgs(
                canvas,
                coords_for_horizontal_line,
                duration=1,
                acks=True,
                reorient=info["chain"]["reorient"],
            )

            for msg in msgs:
                msg.target = serial
                yield msg

    await target.send(FromGenerator(gen), reference, error_catcher=e)

    if not found:
        raise PhotonsAppError("Didn't find any tiles")


if __name__ == "__main__":
    from photons_app.executor import main
    import sys

    main(["lan:tile_dice"] + sys.argv[1:])
