#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.errors import PhotonsAppError
from photons_app.actions import an_action

from photons_messages import DeviceMessages, TileMessages
from photons_control.planner import Gatherer, make_plans
from photons_control.script import FromGenerator

from delfick_project.addons import addon_hook
import logging
import random

log = logging.getLogger("info")


@addon_hook(
    extras=[
        ("lifx.photons", "transport"),
        ("lifx.photons", "messages"),
        ("lifx.photons", "control"),
        ("lifx.photons", "device_finder"),
    ]
)
def __lifx__(collector, *args, **kwargs):
    pass


def make_set_64s(coords_and_sizes):
    for index, (_, (width, height)) in enumerate(coords_and_sizes):
        colors = []

        for _ in range(width):
            for _ in range(height):
                colors.append(
                    {
                        "hue": random.randint(0, 360),
                        "saturation": 1,
                        "brightness": 0.2,
                        "kelvin": 3500,
                    }
                )

        yield TileMessages.Set64(
            x=0,
            y=0,
            width=width,
            length=1,
            duration=2,
            colors=colors,
            tile_index=index,
            res_required=False,
        )


@an_action(needs_target=True, special_reference=True)
async def tiles(collector, target, reference, **kwargs):
    """
    Set any tiles we find on the network to specific colors

    You can specify only specific devices by giving a matcher. For example:

    ``tiles d073d5000001,d073d5000002``

    or

    ``tiles match:group_name=kitchen``
    """
    gatherer = Gatherer(target)
    plans = make_plans("capability", "chain")

    def e(error):
        log.error(error)

    async def gen(reference, sender, **kwargs):
        async for serial, _, info in gatherer.gather_per_serial(plans, reference, sender, **kwargs):
            if "chain" not in info:
                continue

            if not info["capability"]["cap"].has_matrix:
                continue

            yield DeviceMessages.SetPower(level=65535, target=serial, res_required=False)

            for msg in make_set_64s(info["chain"]["coords_and_sizes"]):
                msg.target = serial
                yield msg

    await target.send(FromGenerator(gen), reference, error_catcher=e)


if __name__ == "__main__":
    from photons_app.executor import main
    import sys

    main(["lan:tiles"] + sys.argv[1:])
