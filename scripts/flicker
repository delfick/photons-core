#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)
from photons_app.actions import an_action
from photons_app import helpers as hp

from photons_tile_paint.animation import Animation, TileStateGetter
from photons_themes.coords import user_coords_to_pixel_coords
from photons_messages import LightMessages, DeviceMessages
from photons_control.script import FromGeneratorPerSerial
from photons_control.planner import make_plans, Gatherer
from photons_tile_paint.options import AnimationOptions
from photons_themes.theme import ThemeColor as Color
from photons_tile_paint.addon import Animator
from photons_themes.canvas import Canvas

from delfick_project.norms import sb, dictobj, Meta, BadSpecValue
from delfick_project.addons import addon_hook
import logging
import asyncio
import random
import time

log = logging.getLogger("flicker")


@addon_hook(
    extras=[
        ("lifx.photons", "transport"),
        ("lifx.photons", "messages"),
        ("lifx.photons", "device_finder"),
    ]
)
def __lifx__(collector, *args, **kwargs):
    pass


class between_0_and_1(sb.Spec):
    """A norms spec for validating a value is a float between 0 and 1"""

    def normalise_filled(self, meta, val):
        val = sb.float_spec().normalise(meta, val)
        if val < 0 or val > 1:
            raise BadSpecValue("Number must be between 0 and 1")
        return val


def get_random_brightness(original_brightness, max_drop):
    """
    Return a new brightness between 0 and 1 that is the original brightness
    minus a percentage that is never more than max_drop
    """
    percentage = 1 - (random.randrange(0, max_drop * 100) / 100)
    new_brightness = original_brightness * percentage
    if new_brightness < 0:
        return 0
    elif new_brightness > 1:
        return 1
    else:
        return new_brightness


class FlickerAnimationOptions(AnimationOptions):
    gap = dictobj.Field(sb.float_spec, wrapper=sb.required)
    colors = dictobj.Field(sb.listof(sb.any_spec()), wrapper=sb.required)
    coords_and_sizes = dictobj.Field(sb.listof(sb.any_spec()), wrapper=sb.required)
    original_brightness = dictobj.Field(sb.float_spec, wrapper=sb.required)
    max_brightness_drop = dictobj.Field(sb.float_spec, wrapper=sb.required)

    @hp.memoized_property
    def original_canvas(self):
        info = TileStateGetter.Info(
            user_coords_to_pixel_coords(self.coords_and_sizes), Color(0, 0, 0, 0)
        )
        info.colors = self.colors
        return info.canvas

    def next_brightness(self):
        return get_random_brightness(self.original_brightness, self.max_brightness_drop)

    def next_canvas(self, last_canvas):
        if last_canvas is None:
            last_canvas = self.original_canvas

        next_brightness = self.next_brightness()

        canvas = Canvas()
        for pos, color in last_canvas:
            if color.brightness > 0:
                c = color.clone()
                c.brightness = next_brightness
                canvas[pos] = c

        return canvas


class FlickerAnimation(Animation):
    def setup(self):
        self.every = self.options.gap
        self.duration = self.options.gap

    def next_state(self, prev_state, coords):
        return self.options.next_canvas(prev_state)

    def make_canvas(self, state, coords):
        return state


def Flicker(
    gap=0.25, candle_color=False, max_brightness_drop=0.35, power_on=True, start_brightness=None
):
    async def gen(reference, sender, **kwargs):
        """
        1. Get current brightness. This is our anchor point. All brightness
           changes will be relative to this amount.
        2. Wait a small delay per device, so that the devices are likely out of
           sync
        3. Start a loop from now until the heat death of the universe
            a. Determine a new brightness. This is the original brightness minus
               a percentage that is never more than max_brightness_drop. So if
               max_brightness_drop is 0.35, then the brightness will never be
               more than 35% less than the original value
            b. Send a message to the device setting this brightness. If candle_color
               is true, then we make the light white with a kelvin of 2500

               This message will have a duration equal to the ``gap`` seconds
            c. Wait enough time so that from the point we sent the message to
               the end of the sleep it has been ``gap`` seconds.
        """
        if power_on:
            t = yield DeviceMessages.SetPower(level=65535, res_required=False)

            # Give the power time to set
            await t
            await asyncio.sleep(0.4)

        if start_brightness is not None:
            t = yield LightMessages.SetWaveformOptional(brightness=start_brightness)
            await t

        # Find the original brightness
        # And whether light is on or off
        # Devices that are off will not have the effect run against them
        plans = make_plans("capability", "power", "colors", "chain")
        gathered = await Gatherer(sender.transport_target).gather_all(
            plans, reference, sender, **{**kwargs, "message_timeout": 5}
        )

        chain = None
        colors = None
        product = None
        original_brightness = 1

        if reference not in gathered:
            log.warning(hp.lc("Failed to gather original values from device", serial=reference))
        else:
            info = gathered[reference][1]

            if "chain" in info:
                chain = info["chain"]

            if "colors" in info:
                bs = []
                for item in info["colors"]:
                    bs.extend([c.brightness for c in item if c.brightness > 0])

                colors = list(enumerate(info["colors"]))
                if not bs:
                    original_brightness = 0
                else:
                    original_brightness = sum(bs) / len(bs)

            if "power" in info and not info["power"]["on"]:
                log.info(hp.lc("Device is turned off, will ignore", serial=reference))
                return

            if "capability" in info:
                product = info["capability"]["cap"].product

        # Make sure the different lights aren't in sync to make the effect better
        start_delay = random.randrange(0, gap * 100) / 100
        if start_delay > 0:
            await asyncio.sleep(start_delay)

        log.info(
            hp.lc(
                "Starting flicker for device",
                serial=reference,
                product=product.name if product else product,
                original_brightness=float(f"{original_brightness:0.02f}"),
            )
        )

        if chain and colors and product and product.cap.has_matrix and not candle_color:
            animation = Animator(FlickerAnimation, FlickerAnimationOptions, "flicker animation")
            options = {
                "gap": gap,
                "colors": colors,
                "coords_and_sizes": chain["coords_and_sizes"],
                "original_brightness": original_brightness,
                "max_brightness_drop": max_brightness_drop,
            }
            await animation.animate(
                sender.transport_target,
                sender,
                sender.transport_target.final_future,
                reference,
                options,
            )
            return

        while True:
            new_brightness = get_random_brightness(original_brightness, max_brightness_drop)

            if candle_color:
                msg = LightMessages.SetColor(
                    hue=0,
                    saturation=0,
                    brightness=new_brightness,
                    kelvin=2500,
                    duration=gap,
                    res_required=False,
                )
            else:
                msg = LightMessages.SetWaveformOptional(
                    brightness=new_brightness, period=gap, cycles=1, res_required=False
                )

            start = time.time()

            # Send the message to the device
            yield msg

            # Wait till the next time we should send a message
            diff = gap - (time.time() - start)
            if diff > 0:
                await asyncio.sleep(diff)

    # Return a script that starts the gen function for each serial that we find
    return FromGeneratorPerSerial(gen)


@an_action(needs_target=True, special_reference=True)
async def flicker(collector, target, reference, **kwargs):
    """
    Run a flicker animation on one or more devices at the same time.

    To run against all devices on the network with default options::

        ./flicker

    To run against a particular device::
        
        ./flicker d073d5001337

    Or use the device finder::

        ./flicker match:label=kitchen

    You may specify options, for example::
        
        ./flicker -- '{"candle_color": true}'

    The options are:

    gap - float - defaults 0.25
        The number of seconds between each brightness change

    candle_color - boolean - defaults false
        If true, we set the light to a candle color, otherwise the effect just
        changes brightness

    max_brightness_drop - float between 0 and 1 - default 0.35
        The max percentage of the original brightness that will ever be set on
        the device

    power_on - boolean - default true
        Turn the device on before flicker starts

    start_brightness - float between 0 and 1 - default not specified
        If specified, we set the initial brightness to this value.
    """

    # Create a spec for turning extra options into the keyword arguments that
    # the flicker script takes in
    spec = sb.set_options(
        gap=sb.defaulted(sb.float_spec(), 0.25),
        candle_color=sb.optional_spec(sb.boolean()),
        power_on=sb.optional_spec(sb.boolean()),
        max_brightness_drop=sb.optional_spec(between_0_and_1()),
        start_brightness=sb.optional_spec(between_0_and_1()),
    )
    extra = collector.configuration["photons_app"].extra_as_json

    # Create kwargs for instantiating Flicker with. We include only the options
    # that were specified
    kwargs = {
        k: v for k, v in spec.normalise(Meta.empty(), extra).items() if v is not sb.NotSpecified
    }

    def e(error):
        """Error catcher that just debug prints errors"""
        log.debug(hp.lc("Failed to send a message", error=error))

    # Start our Flicker script against the devices specified on the command line.
    await target.send(Flicker(**kwargs), reference, message_timeout=kwargs["gap"], error_catcher=e)


if __name__ == "__main__":
    from photons_app.executor import main
    import sys

    main(["lan:flicker"] + sys.argv[1:])
